// Code generated by MockGen. DO NOT EDIT.
// Source: clients/github_rest_client.go

// Package mock_clients is a generated GoMock package.
package mock_clients

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v57/github"
)

// MockGitHubRestClient is a mock of GitHubRestClient interface.
type MockGitHubRestClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubRestClientMockRecorder
}

// MockGitHubRestClientMockRecorder is the mock recorder for MockGitHubRestClient.
type MockGitHubRestClientMockRecorder struct {
	mock *MockGitHubRestClient
}

// NewMockGitHubRestClient creates a new mock instance.
func NewMockGitHubRestClient(ctrl *gomock.Controller) *MockGitHubRestClient {
	mock := &MockGitHubRestClient{ctrl: ctrl}
	mock.recorder = &MockGitHubRestClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitHubRestClient) EXPECT() *MockGitHubRestClientMockRecorder {
	return m.recorder
}

// ListEvents mocks base method.
func (m *MockGitHubRestClient) ListEvents(arg0 context.Context, arg1 *github.ListOptions) ([]*github.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvents", arg0, arg1)
	ret0, _ := ret[0].([]*github.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEvents indicates an expected call of ListEvents.
func (mr *MockGitHubRestClientMockRecorder) ListEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvents", reflect.TypeOf((*MockGitHubRestClient)(nil).ListEvents), arg0, arg1)
}

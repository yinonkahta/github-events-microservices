// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mock_stores is a generated GoMock package.
package mock_stores

import (
	stores "github-events-microservices/stores"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockReadStore is a mock of ReadStore interface.
type MockReadStore struct {
	ctrl     *gomock.Controller
	recorder *MockReadStoreMockRecorder
}

// MockReadStoreMockRecorder is the mock recorder for MockReadStore.
type MockReadStoreMockRecorder struct {
	mock *MockReadStore
}

// NewMockReadStore creates a new mock instance.
func NewMockReadStore(ctrl *gomock.Controller) *MockReadStore {
	mock := &MockReadStore{ctrl: ctrl}
	mock.recorder = &MockReadStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadStore) EXPECT() *MockReadStoreMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockReadStore) All(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// All indicates an expected call of All.
func (mr *MockReadStoreMockRecorder) All(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockReadStore)(nil).All), arg0)
}

// Close mocks base method.
func (m *MockReadStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockReadStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockReadStore)(nil).Close))
}

// Count mocks base method.
func (m *MockReadStore) Count() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockReadStoreMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockReadStore)(nil).Count))
}

// Get mocks base method.
func (m *MockReadStore) Get(arg0 int64, arg1 stores.OrderBy, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockReadStoreMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockReadStore)(nil).Get), arg0, arg1, arg2)
}

// MockReadWriteStore is a mock of ReadWriteStore interface.
type MockReadWriteStore struct {
	ctrl     *gomock.Controller
	recorder *MockReadWriteStoreMockRecorder
}

// MockReadWriteStoreMockRecorder is the mock recorder for MockReadWriteStore.
type MockReadWriteStoreMockRecorder struct {
	mock *MockReadWriteStore
}

// NewMockReadWriteStore creates a new mock instance.
func NewMockReadWriteStore(ctrl *gomock.Controller) *MockReadWriteStore {
	mock := &MockReadWriteStore{ctrl: ctrl}
	mock.recorder = &MockReadWriteStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadWriteStore) EXPECT() *MockReadWriteStoreMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockReadWriteStore) All(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// All indicates an expected call of All.
func (mr *MockReadWriteStoreMockRecorder) All(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockReadWriteStore)(nil).All), arg0)
}

// Close mocks base method.
func (m *MockReadWriteStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockReadWriteStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockReadWriteStore)(nil).Close))
}

// Count mocks base method.
func (m *MockReadWriteStore) Count() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockReadWriteStoreMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockReadWriteStore)(nil).Count))
}

// Get mocks base method.
func (m *MockReadWriteStore) Get(arg0 int64, arg1 stores.OrderBy, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockReadWriteStoreMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockReadWriteStore)(nil).Get), arg0, arg1, arg2)
}

// Save mocks base method.
func (m *MockReadWriteStore) Save(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockReadWriteStoreMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockReadWriteStore)(nil).Save), arg0)
}

// SaveAll mocks base method.
func (m *MockReadWriteStore) SaveAll(arg0 []interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAll indicates an expected call of SaveAll.
func (mr *MockReadWriteStoreMockRecorder) SaveAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAll", reflect.TypeOf((*MockReadWriteStore)(nil).SaveAll), arg0)
}

// UpdateAllById mocks base method.
func (m *MockReadWriteStore) UpdateAllById(arg0 map[interface{}]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAllById", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAllById indicates an expected call of UpdateAllById.
func (mr *MockReadWriteStoreMockRecorder) UpdateAllById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAllById", reflect.TypeOf((*MockReadWriteStore)(nil).UpdateAllById), arg0)
}
